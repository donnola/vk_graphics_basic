#version 430

layout(local_size_x = 32, local_size_y = 32) in;

layout (r32f, binding = 0) uniform readonly  image2D inImg;
layout (r32f, binding = 1) uniform writeonly image2D outImg;
layout (rgba32f, binding = 2) uniform readonly image2D position;

const uint n = 11;
const uint offset = 5;

shared float[32 + n - 1][32 + n - 1] img_part;

const float coeff[n] = {0.000006773449998f,	0.0004917205454f, 0.01377499895f, 0.148911963f,	0.621201359f, 1.0f,
0.621201359f, 0.148911963f, 0.01377499895f, 0.0004917205454f, 0.000006773449998f};

void getImgPart(uvec2 g_id, uvec2 l_id, uvec2 wgSize, ivec2 imgSize)
{
    img_part[l_id.y + offset][l_id.x + offset] = imageLoad(inImg, ivec2(g_id)).r;


    if (l_id.x < offset && g_id.x < offset) 
    {
        img_part[l_id.y + offset][l_id.x] = 0.0f;
    }
    if (l_id.y < offset && g_id.y < offset)
    {
        img_part[l_id.y][l_id.x + offset] = 0.0f;
    }
    if (l_id.x < offset && l_id.y < offset && (g_id.x < offset || g_id.y < offset))                           
    {
        img_part[l_id.y][l_id.x] = 0.0f;
    }
    //_________________
    if (l_id.x > wgSize.x - offset - 1 && g_id.x + offset > imgSize.x - 1)
    {
        img_part[l_id.y + offset][l_id.x + 2 * offset] = 0.0f;
    }
    if (l_id.y > wgSize.y - offset - 1 && g_id.y + offset > imgSize.y - 1)                                  
    {
        img_part[l_id.y + 2 * offset][l_id.x + offset] = 0.0f;
    }
    if (l_id.x > wgSize.x - offset - 1 && l_id.y > wgSize.y - offset - 1 && 
    (g_id.x + offset > imgSize.x - 1 || g_id.y + offset > imgSize.y - 1))
    {
        img_part[l_id.y + 2 * offset][l_id.x + 2 * offset] = 0.0f;
    }
    //_________________
    if (l_id.x > wgSize.x - offset - 1 && l_id.y < offset && (g_id.x + offset > imgSize.x - 1 || g_id.y < offset))  
    {
        img_part[l_id.y][l_id.x + 2 * offset] = 0.0f;
    }
    if (l_id.x < offset && l_id.y > wgSize.y - offset - 1 && (g_id.x < offset || g_id.y + offset > imgSize.y - 1))
    {
        img_part[l_id.y + 2 * offset][l_id.x] = 0.0f;
    }
    //////////////////////////////////////////////////////////////////////

    if (l_id.x < offset && g_id.x >= offset) 
    {
        img_part[l_id.y + offset][l_id.x] = imageLoad(inImg, ivec2(g_id.x - offset, g_id.y)).r;
    }
    if (l_id.y < offset && g_id.y >= offset)
    {
        img_part[l_id.y][l_id.x + offset] = imageLoad(inImg, ivec2(g_id.x, g_id.y - offset)).r;
    }
    if (l_id.x < offset && l_id.y < offset && !(g_id.x < offset || g_id.y < offset))                           
    {
        img_part[l_id.y][l_id.x] = imageLoad(inImg, ivec2(g_id.x - offset, g_id.y - offset)).r;
    }
    //_________________
    if (l_id.x > wgSize.x - offset - 1 && g_id.x + offset <= imgSize.x - 1)
    {
        img_part[l_id.y + offset][l_id.x + 2 * offset] = imageLoad(inImg, ivec2(g_id.x + offset, g_id.y)).r;
    }
    if (l_id.y > wgSize.y - offset - 1 && g_id.y + offset <= imgSize.y - 1)                                  
    {
        img_part[l_id.y + 2 * offset][l_id.x + offset] = imageLoad(inImg, ivec2(g_id.x, g_id.y + offset)).r;
    }
    if (l_id.x > wgSize.x - offset - 1 && l_id.y > wgSize.y - offset - 1 && 
    !(g_id.x + offset > imgSize.x - 1 || g_id.y + offset > imgSize.y - 1))
    {
        img_part[l_id.y + 2 * offset][l_id.x + 2 * offset] = imageLoad(inImg, ivec2(g_id.x + offset, g_id.y + offset)).r;
    }
    //_________________
    if (l_id.x > wgSize.x - offset - 1 && l_id.y < offset && !(g_id.x + offset > imgSize.x - 1 || g_id.y < offset))  
    {
        img_part[l_id.y][l_id.x + 2 * offset] = imageLoad(inImg, ivec2(g_id.x + offset, g_id.y - offset)).r;
    }
    if (l_id.x < offset && l_id.y > wgSize.y - offset -1 && !(g_id.x < offset || g_id.y + offset > imgSize.y - 1))
    {
        img_part[l_id.y + 2 * offset][l_id.x] = imageLoad(inImg, ivec2(g_id.x - offset, g_id.y + offset)).r;
    }
}

void main() 
{
    uvec2 g_id = gl_GlobalInvocationID.xy;
    uvec2 l_id = gl_LocalInvocationID.xy;
    uvec2 wgSize  = gl_WorkGroupSize.xy;
    ivec2 imgSize = imageSize(inImg);
    
    if (g_id.x < imgSize.x && g_id.y < imgSize.y)
    {
        getImgPart(g_id, l_id, wgSize, imgSize);
        float depth1 = imageLoad(position, ivec2(g_id)).z;
        barrier();
        float sum = 0.0;
        float coefSum = 0.0;
        for (int i = 0; i < n; ++i)
        {
            float depth2 = imageLoad(position, ivec2(g_id.x, g_id.y + i - offset)).z;
            if (abs(depth2 - depth1) <= 0.1)
            {
                sum += coeff[i] * img_part[l_id.y + i][l_id.x];
                if (g_id.y + i >= offset && g_id.y - offset + i <= imgSize.y)
                {
                    coefSum += coeff[i];
                }
            }
        }
        barrier();
        img_part[l_id.y + offset][l_id.x] = sum / coefSum;
        sum = 0.0;
        coefSum = 0.0;
        for (int i = 0; i < n; ++i)
        {
            float depth2 = imageLoad(position, ivec2(g_id.x + i - offset, g_id.y)).z;
            if (abs(depth2 - depth1) <= 0.1)
            {
                sum += coeff[i] * img_part[l_id.y][l_id.x + i];
                if (g_id.x + i >= offset && g_id.x - offset + i <= imgSize.x)
                {
                    coefSum += coeff[i];
                }
            }
        }
        barrier();
        img_part[l_id.y][l_id.x + offset] = sum / coefSum;
        imageStore(outImg, ivec2(g_id), vec4(img_part[l_id.y + offset][l_id.x + offset], 0.f, 0.f, 0.f));
    }
}
